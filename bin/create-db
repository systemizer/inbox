#!/usr/bin/env python
import os
import click
import sqlalchemy

from alembic.config import Config as alembic_config
from alembic import command as alembic_command

from inbox.config import engine_uri, config

from inbox.ignition import init_db
from inbox.ignition import main_engine
from inbox.sqlalchemy_ext.util import ForceStrictMode

inbox_db_engine = main_engine(pool_size=1)

basic_engine = sqlalchemy.create_engine(
    engine_uri(), listeners=[ForceStrictMode()], echo=False)


@click.command()
@click.option('--prod/--no-prod', default=False,
              help='Disable creating the test database for production '
                   'deployments')
def main(prod):

    if not prod:
        print 'Creating database: test'
        basic_engine.execute(
            "CREATE DATABASE IF NOT EXISTS test DEFAULT CHARACTER SET utf8mb4 "
            "DEFAULT COLLATE utf8mb4_general_ci")
        basic_engine.execute("GRANT ALL PRIVILEGES ON test.* TO "
                             "inboxtest@localhost IDENTIFIED BY 'inboxtest'")

    mysql_user = config.get_required('MYSQL_USER')
    mysql_database = config.get_required('MYSQL_DATABASE')

    print 'Creating database: {}'.format(mysql_database)
    basic_engine.execute("CREATE DATABASE IF NOT EXISTS {} DEFAULT CHARACTER "
                         "SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci;".
                         format(mysql_database))
    basic_engine.execute("GRANT ALL PRIVILEGES ON {mysql_database}.* TO "
                         "{mysql_user}@localhost IDENTIFIED BY '{mysql_user}'".
                         format(mysql_user=mysql_user,
                                mysql_database=mysql_database))

    init_db(inbox_db_engine)

    # Stamp initial alembic revision
    if inbox_db_engine.dialect.has_table(inbox_db_engine, "alembic_version"):
        res = inbox_db_engine.execute(
            "SELECT version_num from alembic_version")
        current_revision = [r for r in res][0][0]
        assert current_revision, \
            'Need current revision in alembic_version table.'
        print 'Already revisioned by alembic {0}'.format(current_revision)
    else:
        alembic_ini_filename = os.environ.get('ALEMBIC_INI_PATH',
                                              'alembic.ini')
        assert os.path.isfile(alembic_ini_filename), \
            'Must have alembic.ini file at {0}'.format(alembic_ini_filename)
        alembic_cfg = alembic_config(alembic_ini_filename)

        print 'Stamping with alembic revision'
        alembic_command.stamp(alembic_cfg, "head")

    print 'Finished setting up database'


if __name__ == '__main__':
    main()
